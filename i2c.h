
#pragma once

#define I2C_PORT PORTC
#define I2C_DDR  DDRC
#define I2C_PIN  PINC
#define I2C_VCC	 4
#define I2C_SCL  3
#define I2C_SDA  5

#define SCL_UP() (I2C_DDR &= ~(1<<I2C_SCL))
#define SCL_DOWN() (I2C_DDR |= (1<<I2C_SCL))
#define SDA_UP() (I2C_DDR &= ~(1<<I2C_SDA))
#define SDA_DOWN() (I2C_DDR |= (1<<I2C_SDA))
#define IS_ACK() ((~I2C_PIN) & (1<<I2C_SDA))
#define VCC_ON() (I2C_PORT |= (1<<I2C_VCC))
#define VCC_OFF() (I2C_PORT &= ~(1<<I2C_VCC))
#define CONTROL 0xA0

void i2c_delay(void);

/*************************************************************************
 Функция ожидания, для ожидания завершения записи.
*************************************************************************/
void delay_50(void);

/*************************************************************************
 Инициализация I2C интерфейса. Должна быть выполнена однажды.
*************************************************************************/
void i2c_init(void);

/*************************************************************************	
  Посылает стартовый импульс и занимает шину.
*************************************************************************/
uint8_t i2c_start(void);

/*************************************************************************
  Завершает обменн данными о освобождает шину.
*************************************************************************/
void i2c_stop(void);

/*************************************************************************
 Посылает один байт и возвращает ACK.
*************************************************************************/
uint8_t i2c_transmit( uint8_t byte );

/*************************************************************************
 Читает один байт в переменную переданную по ссылке и посылает ACK.
*************************************************************************/
void i2c_receive_ack( uint8_t* byte);

/*************************************************************************
 Читает один байт в переменную переданную по ссылке и возвращает ACK.
*************************************************************************/
uint8_t i2c_receive( uint8_t* byte);

/*************************************************************************
  Переводит регистр адреса ПЗУ на заданный адрес 24c16
*************************************************************************/
uint8_t i2c_set_address_c16(uint8_t address, uint8_t for_read);

/*************************************************************************
  Переводит регистр адреса ПЗУ на заданный адрес 24c64
*************************************************************************/
uint8_t i2c_set_address_c64(uint16_t address, uint8_t for_read);

/*************************************************************************
  Записывает один байт по заданному адресу 24c64
*************************************************************************/
uint8_t i2c_write_c64( uint16_t address, uint8_t data );

/*************************************************************************
  Читает один байт по заданному адресу 24c64
*************************************************************************/
uint8_t i2c_read_c64( uint16_t address, uint8_t* data );

/*************************************************************************
  Читает несколько байт по заданному адресу 24c64
*************************************************************************/
uint8_t i2c_read_block_c64( uint16_t address, uint16_t len, uint8_t* data );
/*************************************************************************
  Записывает несколько (до 32) байт по заданному адресу 24c64
*************************************************************************/
uint8_t i2c_write_block_c64( uint16_t address, uint8_t len, uint8_t* data );